# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest() %>% dplyr::sample_n(1)
(input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,"data"]
(input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(data)
assemblages_df = ((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(data))[[1]]
assemblages_df
assemblages_df = ((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(celltype_list))
assemblages_df = ((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(data))[[1]]
((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(celltype_list))
((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(celltype_list))[[1]]
((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(celltype_list))[[1]] %>% unique() %>% unlist()
subset_cols = ((input %>%
dplyr::inner_join(celltype_list, by="ClassName") %>%
# dplyr::select(-CellMarker) %>% unique() %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue,
TimepointMonths, ClassName,
celltype_list) %>%
tidyr::nest())[1,] %>% dplyr::pull(celltype_list))[[1]] %>% unique() %>% unlist()
lapply(c(subset_cols, "CD34"), function(i) {
assemblages_df[[i]] %>% setNames(assemblages_df$IS)
}) %>% setNames(c(subset_cols, "CD34"))
assemblages_list = lapply(unique(c(subset_cols, "CD34")), function(i) {
assemblages_df[[i]] %>% setNames(assemblages_df$IS)
}) %>% setNames(unique(c(subset_cols, "CD34")))
assemblages_list
assemblages_list$Myeloid
unique(unlist(lapply(assemblages_list, names)))
# Combine all species from all assemblages
all_species <- unique(unlist(lapply(assemblages_list, names)))
# Initialize a matrix to store the species counts for all assemblages
counts_matrix = matrix(0, nrow=length(all_species), ncol=length(assemblages_list))
colnames(counts_matrix) = paste0("Assemblage_", 1:length(assemblages_list))
rownames(counts_matrix) = all_species
counts_matrix
# Initialize a matrix to store the species counts for all assemblages
counts_matrix = matrix(0, nrow=length(all_species), ncol=length(assemblages_list))
colnames(counts_matrix) = unique(c(subset_cols, "CD34"))
rownames(counts_matrix) = all_species
counts_matrix
seq_along(assemblages_list)
i = 1
counts_matrix[, i]
names(assemblages_list)
i = "Myeloid"
counts_matrix[, i]
assemblages_list[[i]][all_species]
all_species
# Fill the matrix with the species counts for each assemblage
for (i in names(assemblages_list)) {
counts_matrix[, i] = assemblages_list[[i]][all_species]
}
counts_matrix
rank
-counts_matrix[, i]
1:length(assemblages_list)
rank(-counts_matrix[, i], ties.method="average")
# Step 3: Determine the Ranks and Frequencies for each assemblage
ranks = lapply(names(assemblages_list), function(i) {
rank(-counts_matrix[, i], ties.method="average")
})
ranks
?rank
ranks = lapply(names(assemblages_list), function(i) {
rank(-counts_matrix[, i], ties.method="min")
})
ranks
lapply(names(assemblages_list), function(i) {
rank(-counts_matrix[, i], ties.method="last")
})
rank(-counts_matrix[, i], ties.method="last")
counts_matrix[, i]
# Step 3: Determine the Ranks and Frequencies for each assemblage
ranks = lapply(names(assemblages_list), function(i) {
rank(-counts_matrix[, i], ties.method="min")
})
# Step 3: Determine the Ranks and Frequencies for each assemblage
ranks = lapply(names(assemblages_list), function(i) {
rank(-counts_matrix[, i], ties.method="min")
}) %>% setNames(names(assemblages_list))
ranks
counts_matrix[, i]
sum(counts_matrix[, i]) + 1
sum(counts_matrix[, i]) + 1
ranks[[i]] + 1
(sum(counts_matrix[, i]) + 1) * (ranks[[i]] + 1) / ranks[[i]]
# Step 4: Calculate Adjusted Frequencies for each rank in each assemblage
adjusted_freq = lapply(names(assemblages_list), function(i) {
(sum(counts_matrix[, i]) + 1) * (ranks[[i]] + 1) / ranks[[i]]
}) %>% setNames(names(assemblages_list))
adjusted_freq
adjusted_freq[[i]]
is.na(counts_matrix[, i])
counts_matrix[, i]
# Step 5: Estimate the Number of Unobserved Species in each assemblage
estimated_unobserved = lapply(names(assemblages_list), function(i) {
adjusted_freq[[i]][is.na(counts_matrix[, i])]
})
estimated_unobserved
unlist(adjusted_freq)
# Step 6: Calculate the Number of Shared Species
number_shared_species = sum(unlist(adjusted_freq))
number_shared_species = number_shared_species - sum(unlist(estimated_unobserved))
number_shared_species
adjusted_freq
lapply(unique(c(subset_cols, "CD34")), function(i) {
assemblages_df[[i]] %>% setNames(assemblages_df$IS)
}) %>% setNames(unique(c(subset_cols, "CD34")))
# Combine all species from all assemblages
# combined_species <- unique(unlist(assemblages))
#
# # Count the frequencies of species in each assemblage
# counts <- lapply(assemblages, function(x) table(factor(x, levels = combined_species)))
counts = lapply(unique(c(subset_cols, "CD34")), function(i) {
assemblages_df[[i]] %>% setNames(assemblages_df$IS)
}) %>% setNames(unique(c(subset_cols, "CD34")))
apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0))
counts
apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0))
apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0)) %>% length()
unique(unlist(assemblages_list)) %>% length()
# Get the observed counts of shared species between all assemblages
observed_counts <- apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0))
observed_counts
observed_counts>1
observed_counts>1 %>% sum
observed_counts>1)() %>% sum
(observed_counts>1) %>% sum
sapply(counts, function(x) sum(x > 0))
# Calculate the total number of unique species in each assemblage
n <- sapply(counts, function(x) sum(x > 0))
# Calculate the total number of observed shared species
n_shared <- sum(observed_counts)
n_shared
observed_counts
n_shared
observed_counts
observed_counts %>% unique() %>% length()
observed_counts %>% names %>%  unique() %>% length()
observed_counts %>% length()
# Get the observed counts of shared species between all assemblages
observed_counts <- apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0))
# Calculate the total number of unique species in each assemblage
n <- sapply(counts, function(x) sum(x > 0))
# Calculate the total number of observed shared species
n_shared <- sum(observed_counts)
# Calculate the total number of unobserved shared species
n_unobserved <- prod(n) - n_shared
n_unobserved
n
prod(n)
prod(n)
n
n_unobserved
(n_shared + 1) * (n_unobserved / n_shared)
# Calculate the total number of unobserved shared species
n_unobserved <- prod(n %>% purrr::discard(function(i) i==0)) - n_shared
n_unobserved
# Calculate the Good-Turing estimator
good_turing_estimate <- (n_shared + 1) * (n_unobserved / n_shared)
good_turing_estimate
# Calculate the adjusted estimate using r (additive smoothing)
adjusted_estimate <- (n_shared + r * (n_unobserved / n_shared + r)) / (1 + r)
r =1
# Calculate the adjusted estimate using r (additive smoothing)
adjusted_estimate <- (n_shared + r * (n_unobserved / n_shared + r)) / (1 + r)
adjusted_estimate
# Calculate the total number of unobserved shared species
n_unobserved <- prod(n) - n_shared
# Calculate the Good-Turing estimator
good_turing_estimate <- (n_shared + 1) * (n_unobserved / n_shared)
good_turing_estimate
# Calculate the adjusted estimate using r (additive smoothing)
adjusted_estimate <- (n_shared + r * (n_unobserved / n_shared + r)) / (1 + r)
adjusted_estimate
n_shared
good_turing_estimate
counts %>% purrr::discard(function(i) all(i==0))
counts %>% purrr::discard(function(i) all(i==0)) %>% names
# Combine all species from all assemblages
# combined_species <- unique(unlist(assemblages))
#
# # Count the frequencies of species in each assemblage
# counts <- lapply(assemblages, function(x) table(factor(x, levels = combined_species)))
counts = lapply(unique(c(subset_cols, "CD34")), function(i) {
assemblages_df[[i]] %>% setNames(assemblages_df$IS)
}) %>% setNames(unique(c(subset_cols, "CD34"))) %>%
purrr::discard(function(i) all(i==0))
# Get the observed counts of shared species between all assemblages
observed_counts <- apply(as.data.frame(do.call(cbind, counts)), 1, function(x) sum(x > 0))
# Calculate the total number of unique species in each assemblage
n <- sapply(counts, function(x) sum(x > 0))
# Calculate the total number of observed shared species
n_shared <- sum(observed_counts)
# Calculate the total number of unobserved shared species
n_unobserved <- prod(n) - n_shared
# Calculate the Good-Turing estimator
good_turing_estimate <- (n_shared + 1) * (n_unobserved / n_shared)
# Calculate the adjusted estimate using r (additive smoothing)
adjusted_estimate <- (n_shared + r * (n_unobserved / n_shared + r)) / (1 + r)
good_turing_estimate
adjusted_estimate
n_shared
n_unobserved
length(unique(names(counts %>% unlist())))
n_shared
# Calculate the total number of unobserved shared species
n_unobserved <- length(unique(names(counts %>% unlist()))) - n_shared
# Calculate the Good-Turing estimator
good_turing_estimate <- (n_shared + 1) * (n_unobserved / n_shared)
good_turing_estimate
# Calculate the adjusted estimate using r (additive smoothing)
adjusted_estimate <- (n_shared + r * (n_unobserved / n_shared + r)) / (1 + r)
adjusted_estimate
count()
n
sum(n)
main_path = "~/Dropbox/shared_folders/HSC dynamics/hsccommitment/"
setwd(main_path)
## Load the functions to generate the input df
source(paste0(main_path, "../r_functions/regression_helper_fns.R"))
## Load the sklearn model functions
reticulate::source_python(paste0(main_path, "../r_functions/sklearn_pipe.py"))
library(tidyverse)
require(ggplot2)
bthal_patients = paste0("BTHAL00",c(1,3:10)) %>% stringr::str_replace_all("0010","010") %>%
setNames(c("Pt45","Pt46","Pt47","Pt48","Pt49","Pt50","Pt51","Pt52","Pt53"))
patients_infos = readxl::read_xlsx(paste0(main_path, "../paper docs/Calabria et al - Table 1.xlsx"), skip=1) %>%
dplyr::rename(SubjectID=`TIGET code`, infused_cells=`CD34 pro Kg (x10e6)`,
age=`Treatment Age years`) %>%
dplyr::select(SubjectID, infused_cells, age, `Patient ID`) %>%
dplyr::mutate(ClinicalStudy=stringr::str_extract(SubjectID, "[aA-zZ]+") %>%
stringr::str_replace_all("CUP|HE",""),
SubjectID=ifelse(ClinicalStudy=="BTHAL", bthal_patients[`Patient ID`],
SubjectID)) %>%
dplyr::select(-`Patient ID`)
full.data = read.csv(paste0(main_path, "datasets/stats_good_turing.csv"), row.names=1) %>%
dplyr::left_join(patients_infos) %>%
tibble::as_tibble() %>%
dplyr::rename(Timepoint=TimepointMonths)
color_pal = full.data$colorcode %>% unique() %>% setNames(unique(full.data$ClassName))
div.all = openxlsx::read.xlsx(paste0(main_path, "../diversity/202112.Diversity.ByMarker.xlsx")) %>%
tibble::as_tibble() %>%
dplyr::rename(ClinicalStudy=ClinicalTrial)
ng_scaled = div.all %>%
dplyr::left_join(patients_infos) %>%
dplyr::filter(CellMarker %in% c("CD34", "CD13", "CD14", "CD15", "GLY",
"CD36", "CD19", "CD3", "CD4", "CD8")) %>%
dplyr::select(SubjectID, ClinicalStudy, Tissue, TimePoint, CellType,
ng.DNA.corrected_sum, infused_cells, age) %>%
# dplyr::mutate(scaled_ng=as.numeric(scale(ng.DNA.corrected_sum))) %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue, TimePoint, CellType) %>%
dplyr::mutate(mean_ng=mean(ng.DNA.corrected_sum)) %>% unique() %>%
dplyr::rename(Timepoint=TimePoint) %>%
dplyr::ungroup() %>%
dplyr::filter(CellType != "CD34") %>%
dplyr::mutate(ClassName=dplyr::case_when(
CellType == "T" ~ "UniLyT",
CellType == "B" ~ "UniLyB",
CellType == "Myeloid" ~ "UniMyeloid",
CellType == "Erythroid" ~ "UniErythroid"
)) %>% dplyr::select(-CellType, -ng.DNA.corrected_sum) %>% unique()
ng_scaled2 = div.all %>%
dplyr::left_join(patients_infos) %>%
dplyr::filter(CellMarker %in% c("CD34", "CD13", "CD14", "CD15", "GLY",
"CD36", "CD19", "CD3", "CD4", "CD8")) %>%
dplyr::select(SubjectID, ClinicalStudy, Tissue, TimePoint,
ng.DNA.corrected_sum, infused_cells, age) %>%
# dplyr::mutate(scaled_ng=as.numeric(scale(ng.DNA.corrected_sum))) %>%
dplyr::group_by(SubjectID, ClinicalStudy, Tissue, TimePoint) %>%
dplyr::mutate(mean_ng=mean(ng.DNA.corrected_sum)) %>%
dplyr::mutate(ClassName="Multilineage") %>%
dplyr::rename(Timepoint=TimePoint) %>%
dplyr::ungroup() %>%
dplyr::select(-ng.DNA.corrected_sum) %>% unique()
nISs_VCN = readxl::read_xlsx(paste0(main_path, "datasets/MLD_WAS_BTHAL.AllPatients.hlfu_34MyBTEry.global_allstudies_profile_skewing_fulldata_notNA_stats.xlsx")) %>%
dplyr::left_join(patients_infos) %>%
dplyr::select(SubjectID, ClinicalStudy, Tissue, Timepoint,
ClassName, CRonR, OverallNIS, VCN, age, infused_cells)
subs = full.data %>%
dplyr::inner_join(ng_scaled %>% dplyr::add_row(ng_scaled2)) %>%
dplyr::inner_join(nISs_VCN) %>%
dplyr::select(ClinicalStudy, SubjectID, ClassName, Timepoint, Tissue,
dplyr::contains("ratio"), colorcode, age, infused_cells,
dplyr::contains("_ng"), OverallNIS, VCN)
## nested df
nested.tab = subs %>%
tidyr::drop_na() %>%
dplyr::group_by(Tissue, ClinicalStudy, ClassName) %>%
tidyr::nest()
y_col = "ratio_chao"
nested.fit = nested.tab %>%
dplyr::summarise(
fit1 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=reticulate::tuple(c("Timepoint")))),
fit2 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=c("Timepoint", "mean_ng"))),
fit3 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=c("Timepoint", "mean_ng", "OverallNIS"))),
fit4 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=c("Timepoint", "mean_ng", "OverallNIS", "VCN"))),
fit5 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=c("Timepoint", "mean_ng", "OverallNIS",
"VCN", "infused_cells"))),
fit6 = list(fit_pipeline( get_x(data, to_py=T),
get_y(data, column=y_col, to_py=T),
get_x(data, to_py=T),
subset=c("Timepoint", "mean_ng", "OverallNIS",
"VCN", "infused_cells", "age"))),
data = data,
.groups="keep")
## Unnest preds and save ####
unnested = nested.fit %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols=tidyr::starts_with("fit"), names_to="fitname") %>%
tidyr::unnest_wider(value) %>%
tidyr::unnest(cols=c("fitname","SubjectID","Timepoint",
"mean_ng", "ratio_chao", "ratio_emp", "OverallNIS",
"VCN", "age", "infused_cells", "colorcode", "fit", "se")) %>%
dplyr::rename(pred_chao=fit, pred_chao_se=se) %>%
dplyr::mutate(regression_formula=dplyr::case_when(
fitname == "fit1" ~ "ratio_chao ~ TimePoint",
fitname == "fit2" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS",
fitname == "fit3" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN",
fitname == "fit4" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN + CD34proKG",
fitname == "fit5" ~ "ratio_chao ~ TimePoint + Age + mean_ng + OverallNIS + VCN + CD34proKG"
))
## Unnest preds and save ####
unnested = nested.fit %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols=tidyr::starts_with("fit"), names_to="fitname") %>%
tidyr::unnest_wider(value) %>%
tidyr::unnest(cols=c("fitname","SubjectID","Timepoint",
"mean_ng", "ratio_chao", "ratio_emp", "OverallNIS",
"VCN", "age", "infused_cells", "colorcode", "fit", "se")) %>%
dplyr::rename(pred_chao=fit, pred_chao_se=se) %>%
dplyr::mutate(regression_formula=dplyr::case_when(
fitname == "fit1" ~ "ratio_chao ~ TimePoint",
fitname == "fit2" ~ "ratio_chao ~ TimePoint + mean_ng",
fitname == "fit3" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS",
fitname == "fit4" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN",
fitname == "fit5" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN + CD34proKG",
fitname == "fit6" ~ "ratio_chao ~ TimePoint + Age + mean_ng + OverallNIS + VCN + CD34proKG"
))
unnested
unnested$fitname
unnested$fitname %>% unique
unnested$regression_formula %>% unique
## Unnest preds and save ####
unnested = nested.fit %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols=tidyr::starts_with("fit"), names_to="fitname") %>%
tidyr::unnest_wider(value) %>%
tidyr::unnest(cols=c("fitname","SubjectID","Timepoint",
"mean_ng", "ratio_chao", "ratio_emp", "OverallNIS",
"VCN", "age", "infused_cells", "colorcode", "fit", "se")) %>%
dplyr::rename(pred_chao=fit, pred_chao_se=se) %>%
dplyr::mutate(regression_formula=dplyr::case_when(
fitname == "fit1" ~ "ratio_chao ~ TimePoint",
fitname == "fit2" ~ "ratio_chao ~ TimePoint + mean_ng",
fitname == "fit3" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS",
fitname == "fit4" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN",
fitname == "fit5" ~ "ratio_chao ~ TimePoint + mean_ng + OverallNIS + VCN + CD34proKG",
fitname == "fit6" ~ "ratio_chao ~ TimePoint + Age + mean_ng + OverallNIS + VCN + CD34proKG"
))
## Save RDS and csv
saveRDS(unnested, paste0(main_path, "datasets/predicted_gt_ratio.Rds"))
unnested %>%
dplyr::select(-data) %>%
write.csv(paste0(main_path, "datasets/pred_gt_ratio_stats.csv"),
row.names=F)
# Plot #####
unnested = readRDS(paste0(main_path, "datasets/predicted_gt_ratio.Rds"))
unnested %>%
dplyr::group_by(Timepoint, Tissue, ClinicalStudy, ClassName, fitname) %>%
ggplot() +
geom_smooth(data=subs,
aes(x=Timepoint, y=ratio_chao), fill="orange", color="orange",
alpha=.3, level=.75, linetype="solid", linewidth=0.7) +
geom_smooth(aes(x=Timepoint, y=pred_chao,
color=regression_formula,
fill=regression_formula),
se=TRUE, level=.75) +
ggh4x::facet_nested(Tissue + ClassName ~ ClinicalStudy, scales="free") +
theme_bw() + theme(legend.position="bottom") +
labs(color="Regression model", fill="Regression model")
unnested %>%
dplyr::group_by(Timepoint, Tissue, ClinicalStudy, ClassName, fitname) %>%
ggplot() +
geom_smooth(data=subs,
aes(x=Timepoint, y=ratio_chao), fill="orange", color="orange",
alpha=.3, level=.75, linetype="solid", linewidth=0.7) +
geom_smooth(aes(x=Timepoint, y=pred_chao,
color=regression_formula,
fill=regression_formula),
se=TRUE, level=.75) +
ggh4x::facet_nested(Tissue + ClassName ~ ClinicalStudy, scales="free") +
theme_bw() + theme(legend.position="right") +
labs(color="Regression model", fill="Regression model")
ggsave(paste0(main_path, "plots/gt_compare_fits_perc_is.pdf"), height=12, width=12)
unnested %>%
dplyr::group_by(Timepoint, Tissue, ClinicalStudy, ClassName, fitname) %>%
dplyr::filter(fitname=="fit5") %>%
ggplot() +
geom_smooth(aes(x=Timepoint, y=pred_chao, fill=ClassName, color=ClassName),
se=TRUE, level=.75, alpha=0.4, formula=y~log(x),
stat="smooth", position="identity") +
scale_color_manual(values=color_pal) +
scale_fill_manual(values=color_pal) +
scale_x_continuous(breaks = seq(0, max(unnested$Timepoint, na.rm=T), 12) ) +
facet_grid(Tissue ~ factor(ClinicalStudy, levels=c("MLD","WAS","BTHAL")),
scales="free_x", space="free_x") +
theme_bw() +
theme(strip.text=element_text(face="bold", size=16)) +
theme(legend.direction="horizontal", legend.position="bottom",
legend.box="horizontal") +
theme(axis.text.x=element_text(size=16), axis.text.y=element_text(size=16),
axis.title=element_text(size=16), plot.title=element_text(size=20)) +
labs(title = paste0("Recaptured IS in percentage"),
# subtitle = paste0("CR on R (C:Class, S:Singletons, R:Recaptured, U:All).", " Abundance threshold = ", (1), ". All patients included." ),
x="Months after gene therapy", y="% of IS",
colour="Class", fill="Class")
unnested %>% dplyr::filter(fitname==fit_to_consider) %>%
dplyr::pull(regression_formula) %>% unique()
fit_to_consider = "fit6"
unnested %>% dplyr::filter(fitname==fit_to_consider) %>%
dplyr::pull(regression_formula) %>% unique()
regr_formula = unnested %>% dplyr::filter(fitname==fit_to_consider) %>%
dplyr::pull(regression_formula) %>% unique()
unnested %>%
dplyr::group_by(Timepoint, Tissue, ClinicalStudy, ClassName, fitname) %>%
dplyr::filter(fitname==fit_to_consider) %>%
ggplot() +
geom_smooth(aes(x=Timepoint, y=pred_chao, fill=ClassName, color=ClassName),
se=TRUE, level=.75, alpha=0.4, formula=y~log(x),
stat="smooth", position="identity") +
scale_color_manual(values=color_pal) +
scale_fill_manual(values=color_pal) +
scale_x_continuous(breaks = seq(0, max(unnested$Timepoint, na.rm=T), 12) ) +
facet_grid(Tissue ~ factor(ClinicalStudy, levels=c("MLD","WAS","BTHAL")),
scales="free_x", space="free_x") +
theme_bw() +
theme(strip.text=element_text(face="bold", size=16)) +
theme(legend.direction="horizontal", legend.position="bottom",
legend.box="horizontal") +
theme(axis.text.x=element_text(size=16), axis.text.y=element_text(size=16),
axis.title=element_text(size=16), plot.title=element_text(size=20)) +
labs(title = paste0("Recaptured IS in percentage"),
subtitle = paste0("Regression: ", regr_formula),
x="Months after gene therapy", y="% of IS",
colour="Class", fill="Class")
ggsave(paste0(main_path, "plots/gt_pred_perc_is.pdf"), height=8, width=12)
